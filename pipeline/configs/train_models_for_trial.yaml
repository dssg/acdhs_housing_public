# CONFIG VERSION
config_version: 'v8'

# EXPERIMENT METADATA
model_comment: 'e4m_hl1y_mod4pilot'
random_seed: 42

# TIME SPLITTING
# we will restrict the time splits to be 2 in the run.py to train one model for generating predictions for the trial (test set has no labels), and another with known validation labels. 
# That's why the model update frequency is set to 12 months
temporal_config:
    feature_start_time: '2011-01-01' 
    feature_end_time: '2025-05-01' 
    label_start_time: '2011-01-01' 
    label_end_time: '2026-05-01' 
    model_update_frequency: '12month' 
    training_as_of_date_frequencies: '4month' 
    test_as_of_date_frequencies: '3month' # this value doesn't matter
    max_training_histories: '10year' 
    test_durations: '0day' 
    training_label_timespans: ['12month'] 
    test_label_timespans: ['12month'] 

# COHORT AND LABEL GENERATION
label_config:
  filepath: 'src/pipeline/configs/labels/facing_eviction_homelessness.sql'
  name: 'e4m_hl1y'


# MODEL GRID PRESETS
grid_config:

  'sklearn.ensemble.RandomForestClassifier':
    criterion: ['gini']
    max_depth: [50] 
    n_jobs: [-1]
    max_features: ['sqrt']
    n_estimators: [10000]
    min_samples_leaf: [25] 
    min_samples_split: [25] 
    n_jobs: [-1]

# MODEL SCORING
scoring:
    testing_metric_groups:
        -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1, 2, 3, 4, 5, 6, 7, 8, 9, 
                      10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                      20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
                      30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
                      40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                      50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                      60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
                      70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                      80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                      90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                      100]
            top_n: [25, 50, 100, 500, 1000, 2000]
        -
          metrics: [roc_auc]

    training_metric_groups:
      -
          metrics: [precision@, recall@]
          thresholds:
            percentiles: [1, 2, 3, 4, 5, 6, 7, 8, 9, 
                      10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                      20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
                      30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
                      40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                      50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                      60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
                      70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                      80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                      90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
                      100]
            top_n: [25, 50, 100, 500, 1000, 2000]
    
    subsets:
      -
        name: prev_hl
        query: |
          select distinct client_id as entity_id
          from pretriage.homelessness_id
          where program_start_dt < '{as_of_date}'::date
      # - 
      #   name: eviction_filed_1wk
      #   query: |
      #     select
      #         distinct client_id as entity_id
      #     from pretriage.eviction_client_matches_id ecm left join clean.eviction e 
      #     on ecm.matter_id = e.matter_id
      #     where e.filingdt >= '{as_of_date}'::date - interval '1 week'
      #     and e.filingdt < '{as_of_date}'::date
      # - 
      #   name: eviction_filed_2wk
      #   query: |
      #     select
      #         distinct client_id as entity_id
      #     from pretriage.eviction_client_matches_id ecm left join clean.eviction e 
      #     on ecm.matter_id = e.matter_id
      #     where e.filingdt >= '{as_of_date}'::date - interval '2 week'
      #     and e.filingdt < '{as_of_date}'::date
      # - 
      #   name: eviction_filed_1mo
      #   query: |
      #     select
      #         distinct client_id as entity_id
      #     from pretriage.eviction_client_matches_id ecm left join clean.eviction e 
      #     on ecm.matter_id = e.matter_id
      #     where e.filingdt >= '{as_of_date}'::date - interval '1 month'
      #     and e.filingdt < '{as_of_date}'::date

bias_audit_config:
  from_obj_table: |
    (
        with clients as 
        (
          select distinct on (client_hash)
          *
          from clean.client_feed
        )
        select 
          dob,
          greatest(dob, '2011-01-01'::date) as knowledge_date,
          client_id as entity_id,
          gender,
          race 
        from clients c join pretriage.client_id_mapping cid using(client_hash)
    ) as demo
  attribute_columns: [race, gender]
  knowledge_date_column: knowledge_date
  entity_id_column: entity_id
  ref_groups_method: predefined
  ref_groups: 
    gender: '1~Male'
    race: 'White'
  thresholds:
    percentiles: [1,5,10,15,20,25,50,100]
    top_n: [50, 100, 150, 200, 500, 1000]